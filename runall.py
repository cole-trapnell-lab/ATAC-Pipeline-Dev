#Python pipeline to convert NextSeq BCL files to fastq,
#fix errors in barcodes and trim adapters from fastqs.

#Cannibalized from Darren with a bunch of stuff stolen from Andrew and compiled/maintained by Hannah


import argparse
import os
import subprocess
import gzip
import os.path
import sys

parser = argparse.ArgumentParser(description='A program to convert NextSeq BCL files to cleaned and corrected fastq files for scATAC-seq analysis.')
parser.add_argument('-R','--rundir', help='Run directory containing BCL files',dest='rundir')
parser.add_argument('-O','--outdir', help='Output directory',dest='outdir')
parser.add_argument('-P','--prefix',help='Output file prefix',dest='prefix')
parser.add_argument('-E','--maxedit', help='Maximum allowed edit distance (default = 3)', default=3, dest='maxedit')
parser.add_argument('--force_overwrite_all', action='store_true', help='Force overwrite of all steps of pipeline regardless of files already present.')
parser.add_argument('--force_overwrite_bcl2fastq', action='store_true', help='Force overwrite bcl2fastq regardless of files already present.')
args = parser.parse_args()

# Construct paths to pipeline scripts as constants
PIPELINE_PATH = os.path.dirname(os.path.realpath(__file__))
OUTPUT_PATH = args.outdir
OUTPUT_PREFIX = args.prefix

BARCODE_CORRECTER = os.path.join(PIPELINE_PATH, 'barcode_correct_scatac.py')
TRIMMOMATIC = os.path.join(PIPELINE_PATH, 'Trimmomatic-0.36/trimmomatic-0.36.jar')

COMMANDS_TO_ARRAY_JOB_SCRIPT = os.path.join(PIPELINE_PATH, 'commands2arrayjob.sh')


SGE_LOGS_DIRECTORY = 'sge_logs'
SGE_CONFIGURATION = '-b y -shell y -cwd -j y -o %s -e %s' % (SGE_LOGS_DIRECTORY, SGE_LOGS_DIRECTORY)

# Folders generated and used by pipeline
FASTQ_DIRECTORY = os.path.join(OUTPUT_PATH, 'fastqs')

# Scripts that are generated and used by the pipeline
# Other files generated by the pipeline
CLEAN_R1 = os.path.join(OUTPUT_PATH, 'Clean.R1.fq.gz')
CLEAN_R2 = os.path.join(OUTPUT_PATH, 'Clean.R2.fq.gz')
BAR_OUT1 = os.path.join(OUTPUT_PATH, OUTPUT_PREFIX, 'split.1.fq.gz')
BAR_OUT2 = os.path.join(OUTPUT_PATH, OUTPUT_PREFIX, 'split.2.fq.gz')

def initialize_directories(pipeline_root_directory):
	fastqs = os.path.abspath(FASTQ_DIRECTORY)
	sge_logs = os.path.join(pipeline_root_directory, SGE_LOGS_DIRECTORY)

	
	for directory in [sge_logs,fastqs]:
		if not os.path.exists(directory):
			os.mkdir(directory)

def clean_fastqs(file_list, outfile):
	fastqdic = {'@':'winner'}
	for ifile in file_list:
		with gzip.open(FASTQ_DIRECTORY + ifile,  'rb') as f:
			z = 1
			for line in f:
				try:
					fastqdic[line[0]]
					barcodeclean = line.strip().split()[1].split(':')[3].replace('+','')
					content = '@' + barcodeclean + ':' + str(z) + '\n'
					z += 1
				except KeyError:
					content = line
					with gzip.open(outfile, 'ab') as o:
						o.write(content)


if __name__ == '__main__':
	# Initialize directories required for the pipeline
	print 'Initializing directories for pipeline...'
	initialize_directories(args.outdir)

	# Submit bcl2fastq only if no existing results or if user wants to overwrite
	if len(os.listdir(FASTQ_DIRECTORY)) == 0 or args.force_overwrite_all or args.force_overwrite_quantification:
		print 'Starting bcl2fastq...'
		bcl2fastq_command = 'module load modules modules-init modules-gs bcl2fastq/2.16 fastqc/0.10.1; bcl2fastq --runfolder-dir %s -o %s --ignore-missing-filter' % (args.rundir, FASTQ_DIRECTORY)  
		subprocess.call(bcl2fastq_command, shell=True)
	else:
		print 'fastq directory is not empty, skipping bcl2fastq. Specify --force_overwrite_all or --force_overwrite_bcl2fastq to redo.'
	
	print "Cleaning fastq files..."

	fastq_files = [f for f in os.listdir(FASTQ_DIRECTORY) if os.path.isfile(os.path.join(FASTQ_DIRECTORY, f))]
	
	R1_files = [f for f in fastq_files if 'R1' in f]
	clean_fastqs(R1_files, CLEAN_R1)
	
	R2_files = [f for f in fastq_files if 'R2' in f]
	clean_fastqs(R2_files, CLEAN_R2)


	print "Fixing barcodes..."

	subprocess.call('python %s -E %s ' % (BARCODE_CORRECTER, args.maxedit), shell=True)

	print "Trimming adapters..."

	trimmer_out1 = os.path.join(OUTPUT_PATH, OUTPUT_PREFIX, '.split.1.trimmed.paired.fastq.gz')
	trimmer_out2 = os.path.join(OUTPUT_PATH, OUTPUT_PREFIX, '.split.2.trimmed.paired.fastq.gz')
	trimmer_un_out1 = os.path.join(OUTPUT_PATH, OUTPUT_PREFIX, '.split.1.trimmed.unpaired.fastq.gz')
	trimmer_un_out2 = os.path.join(OUTPUT_PATH, OUTPUT_PREFIX, '.split.2.trimmed.unpaired.fastq.gz')

	
	trimmer_command = 'java -Xmx1G -jar %s PE %s %s %s %s %s %s ILLUMINACLIP:%sTrimmomatic-0.36/adapters/NexteraPE-PE.fa:2:30:10:1:true MINLEN:20' % \
		(TRIMMOMATIC, BAR_OUT1, BAR_OUT2, trimmer_out1, trimmer_un_out1, trimmer_out2, trimmer_un_out2, PIPELINE_PATH)
 
	subprocess.call(trimmer_command, shell=True)

	print "Cleaning up..."

	clean_command = 'rm %s; rm %s; rm %s; rm %s;' % (BAR_OUT1, BAR_OUT2, trimmer_un_out1, trimmer_un_out2)
	subprocess.call(clean_command, shell=True)




