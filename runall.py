#Python pipeline to convert NextSeq BCL files to fastq,
#fix errors in barcodes and trim adapters from fastqs.

#Cannibalized from Darren with a bunch of stuff stolen from Andrew and compiled/maintained by Hannah


import argparse
import os
import subprocess
import gzip
import os.path


# Construct paths to pipeline scripts as constants
PIPELINE_PATH = os.path.dirname(os.path.realpath(__file__))

BARCODE_CORRECTER = os.path.join(PIPELINE_PATH, 'barcode_correct_scatac.py')
TRIMMOMATIC = os.path.join(PIPELINE_PATH, 'Trimmomatic-0.36/trimmomatic-0.36.jar')

COMMANDS_TO_ARRAY_JOB_SCRIPT = os.path.join(PIPELINE_PATH, 'commands2arrayjob.sh')


SGE_LOGS_DIRECTORY = 'sge_logs'
SGE_CONFIGURATION = '-b y -shell y -cwd -j y -o %s -e %s' % (SGE_LOGS_DIRECTORY, SGE_LOGS_DIRECTORY)
TRIM_FASTQ_QSUB_PARAMETERS = '%s -N trim_fastq -l mfree=2G' % SGE_CONFIGURATION

# Folders generated and used by pipeline
FASTQ_DIRECTORY = os.path.abspath('fastqs')

# Scripts that are generated and used by the pipeline
TRIM_FASTQ_SCRIPT_LIST = os.path.abspath('trim_fastq_script_list.sh')
CUFFNORM_SCRIPT = os.path.abspath('cuffnorm_script.sh')
CUFFDIFF_SCRIPT = os.path.abspath('cuffdiff_script.sh')

# Other files generated by the pipeline
CLEAN_R1 = os.path.abspath('Clean.R1.fq.gz')
CLEAN_R2 = os.path.abspath('Clean.R2.fq.gz')
FAILED_CELLS_SAMPLE_SHEET = os.path.abspath('sample_sheet_failed_cells.txt')
ALIGNMENT_SUMMARY_FILE_LIST = os.path.abspath('alignment_summary_files.list')
ALIGNMENT_SUMMARY_TABLE = os.path.abspath('alignment_summary.txt')

TRIMMED_READS_DIRECTORY = os.path.abspath('.reads_trimmed')


def initialize_directories(pipeline_root_directory):
	fastqs = os.path.join(pipeline_root_directory, FASTQ_DIRECTORY)
	sge_logs = os.path.join(pipeline_root_directory, SGE_LOGS_DIRECTORY)

	
	for directory in [sge_logs,fastqs]:
		if not os.path.exists(directory):
			os.mkdir(directory)

def clean_fastqs(file_list, outfile):
	fastqdic = {'@':'winner'}
	for ifile in file_list:
		with gzip.open(FASTQ_DIRECTORY + ifile,  'rb') as f:
			z = 1
			for line in f:
				try:
					fastqdic[line[0]]
					barcodeclean = line.strip().split()[1].split(':')[3].replace('+','')
					content = '@' + barcodeclean + ':' + str(z) + '\n'
					z += 1
				except KeyError:
					content = line
					with gzip.open(outfile, 'ab') as o:
						o.write(content)


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='A program to convert NextSeq BCL files to cleaned and corrected fastq files for scATAC-seq analysis.')
	parser.add_argument('-R','--rundir', help='Run directory containing BCL files',dest='rundir')
	parser.add_argument('-O','--outdir', help='Output directory',dest='outdir')
	parser.add_argument('-P','--prefix',help='Output file prefix',dest='prefix')
	args = parser.parse_args()

	# Initialize directories required for the pipeline
	print 'Initializing directories for pipeline...'
	initialize_directories(args.outdir)


	print "Converting BCL files..."
	bcl2fastq_command = 'module load modules modules-init modules-gs bcl2fastq/2.16 fastqc/0.10.1; bcl2fastq --runfolder-dir ' + args.rundir + ' -o ' + FASTQ_DIRECTORY + ' --ignore-missing-filter'
	
	subprocess.call(bcl2fastq_command, shell=True)

	print "Cleaning fastq files..."

	fastq_files = [f for f in os.listdir(FASTQ_DIRECTORY) if os.path.isfile(os.path.join(FASTQ_DIRECTORY, f))]
	
	R1_files = [f for f in fastq_files if 'R1' in f]
	clean_fastqs(R1_files, CLEAN_R1)
	
	R2_files = [f for f in fastq_files if 'R2' in f]
	clean_fastqs(R2_files, CLEAN_R2)


	print "Fixing barcodes..."

	barcode_command = 'python ' BARCODE_CORRECTER ' -F ' + CLEAN_R1 + ' -R ' + CLEAN_R2 + ' -O ' + args.outdir + ' -o ' + args.prefix
	subprocess.call(barcode_command, shell=True)

	print "Trimming adapters..."

	trimmer_command = 'java -Xmx1G -jar ' + TRIMMOMATIC PE + args.outdir + args.prefix + 
	'.split.1.fq.gz ' + args.outdir + args.prefix + '.split.2.fq.gz ' + args.outdir + args.prefix + '.split.1.trimmed.paired.fastq.gz ' + 
	args.outdir + args.prefix + '.split.1.trimmed.unpaired.fastq.gz ' + args.outdir + args.prefix + '.split.2.trimmed.paired.fastq.gz ' + args.outdir + args.prefix + 
	'.split.2.trimmed.unpaired.fastq.gz ILLUMINACLIP:/net/shendure/vol1/home/cusanovi/bin/Trimmomatic-0.32/adapters/NexteraPE-PE.fa:2:30:10:1:true MINLEN:20'
	

	print "Cleaning up..."

	cleaner = 'rm ' + args.outdir + args.prefix + '.split.1.fq.gz; rm ' + args.outdir + args.prefix + '.split.2.fq.gz; rm ' + args.outdir + args.prefix + '.split.1.trimmed.unpaired.fastq.gz; rm ' + args.outdir + args.prefix + '.split.2.trimmed.unpaired.fastq.gz;'
	submitter(cleaner)















